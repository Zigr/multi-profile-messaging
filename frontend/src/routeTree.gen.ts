/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TemplatesRouteImport } from './routes/templates'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LogsRouteImport } from './routes/logs'
import { Route as ListsRouteImport } from './routes/lists'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as SettingsProfilesRouteImport } from './routes/settings/profiles'
import { Route as SettingsIdRouteImport } from './routes/settings/$id'

const TemplatesRoute = TemplatesRouteImport.update({
  id: '/templates',
  path: '/templates',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LogsRoute = LogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const ListsRoute = ListsRouteImport.update({
  id: '/lists',
  path: '/lists',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsProfilesRoute = SettingsProfilesRouteImport.update({
  id: '/profiles',
  path: '/profiles',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsIdRoute = SettingsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => SettingsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/lists': typeof ListsRoute
  '/logs': typeof LogsRoute
  '/settings': typeof SettingsRouteWithChildren
  '/templates': typeof TemplatesRoute
  '/settings/$id': typeof SettingsIdRoute
  '/settings/profiles': typeof SettingsProfilesRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/lists': typeof ListsRoute
  '/logs': typeof LogsRoute
  '/templates': typeof TemplatesRoute
  '/settings/$id': typeof SettingsIdRoute
  '/settings/profiles': typeof SettingsProfilesRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/lists': typeof ListsRoute
  '/logs': typeof LogsRoute
  '/settings': typeof SettingsRouteWithChildren
  '/templates': typeof TemplatesRoute
  '/settings/$id': typeof SettingsIdRoute
  '/settings/profiles': typeof SettingsProfilesRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/lists'
    | '/logs'
    | '/settings'
    | '/templates'
    | '/settings/$id'
    | '/settings/profiles'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/lists'
    | '/logs'
    | '/templates'
    | '/settings/$id'
    | '/settings/profiles'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/lists'
    | '/logs'
    | '/settings'
    | '/templates'
    | '/settings/$id'
    | '/settings/profiles'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ListsRoute: typeof ListsRoute
  LogsRoute: typeof LogsRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  TemplatesRoute: typeof TemplatesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/templates': {
      id: '/templates'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/lists': {
      id: '/lists'
      path: '/lists'
      fullPath: '/lists'
      preLoaderRoute: typeof ListsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/profiles': {
      id: '/settings/profiles'
      path: '/profiles'
      fullPath: '/settings/profiles'
      preLoaderRoute: typeof SettingsProfilesRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/$id': {
      id: '/settings/$id'
      path: '/$id'
      fullPath: '/settings/$id'
      preLoaderRoute: typeof SettingsIdRouteImport
      parentRoute: typeof SettingsRoute
    }
  }
}

interface SettingsRouteChildren {
  SettingsIdRoute: typeof SettingsIdRoute
  SettingsProfilesRoute: typeof SettingsProfilesRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsIdRoute: SettingsIdRoute,
  SettingsProfilesRoute: SettingsProfilesRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ListsRoute: ListsRoute,
  LogsRoute: LogsRoute,
  SettingsRoute: SettingsRouteWithChildren,
  TemplatesRoute: TemplatesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
